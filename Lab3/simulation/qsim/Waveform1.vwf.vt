// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/06/2024 19:02:27"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Lab3_2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Lab3_2_vlg_sample_tst(
	switch,
	sampler_tx
);
input [1:0] switch;
output sampler_tx;

reg sample;
time current_time;
always @(switch)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Lab3_2_vlg_check_tst (
	sevensegement0,
	sevensegement1,
	sevensegement2,
	sevensegement3,
	sampler_rx
);
input [0:6] sevensegement0;
input [0:6] sevensegement1;
input [0:6] sevensegement2;
input [0:6] sevensegement3;
input sampler_rx;

reg [0:6] sevensegement0_expected;
reg [0:6] sevensegement1_expected;
reg [0:6] sevensegement2_expected;
reg [0:6] sevensegement3_expected;

reg [0:6] sevensegement0_prev;
reg [0:6] sevensegement1_prev;
reg [0:6] sevensegement2_prev;
reg [0:6] sevensegement3_prev;

reg [0:6] sevensegement0_expected_prev;
reg [0:6] sevensegement1_expected_prev;
reg [0:6] sevensegement2_expected_prev;
reg [0:6] sevensegement3_expected_prev;

reg [0:6] last_sevensegement0_exp;
reg [0:6] last_sevensegement1_exp;
reg [0:6] last_sevensegement2_exp;
reg [0:6] last_sevensegement3_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	sevensegement0_prev = sevensegement0;
	sevensegement1_prev = sevensegement1;
	sevensegement2_prev = sevensegement2;
	sevensegement3_prev = sevensegement3;
end

// update expected /o prevs

always @(trigger)
begin
	sevensegement0_expected_prev = sevensegement0_expected;
	sevensegement1_expected_prev = sevensegement1_expected;
	sevensegement2_expected_prev = sevensegement2_expected;
	sevensegement3_expected_prev = sevensegement3_expected;
end


// expected sevensegement3[ 6 ]
initial
begin
	sevensegement3_expected[6] = 1'bX;
end 
// expected sevensegement3[ 5 ]
initial
begin
	sevensegement3_expected[5] = 1'bX;
end 
// expected sevensegement3[ 4 ]
initial
begin
	sevensegement3_expected[4] = 1'bX;
end 
// expected sevensegement3[ 3 ]
initial
begin
	sevensegement3_expected[3] = 1'bX;
end 
// expected sevensegement3[ 2 ]
initial
begin
	sevensegement3_expected[2] = 1'bX;
end 
// expected sevensegement3[ 1 ]
initial
begin
	sevensegement3_expected[1] = 1'bX;
end 
// expected sevensegement3[ 0 ]
initial
begin
	sevensegement3_expected[0] = 1'bX;
end 
// expected sevensegement2[ 6 ]
initial
begin
	sevensegement2_expected[6] = 1'bX;
end 
// expected sevensegement2[ 5 ]
initial
begin
	sevensegement2_expected[5] = 1'bX;
end 
// expected sevensegement2[ 4 ]
initial
begin
	sevensegement2_expected[4] = 1'bX;
end 
// expected sevensegement2[ 3 ]
initial
begin
	sevensegement2_expected[3] = 1'bX;
end 
// expected sevensegement2[ 2 ]
initial
begin
	sevensegement2_expected[2] = 1'bX;
end 
// expected sevensegement2[ 1 ]
initial
begin
	sevensegement2_expected[1] = 1'bX;
end 
// expected sevensegement2[ 0 ]
initial
begin
	sevensegement2_expected[0] = 1'bX;
end 
// expected sevensegement1[ 6 ]
initial
begin
	sevensegement1_expected[6] = 1'bX;
end 
// expected sevensegement1[ 5 ]
initial
begin
	sevensegement1_expected[5] = 1'bX;
end 
// expected sevensegement1[ 4 ]
initial
begin
	sevensegement1_expected[4] = 1'bX;
end 
// expected sevensegement1[ 3 ]
initial
begin
	sevensegement1_expected[3] = 1'bX;
end 
// expected sevensegement1[ 2 ]
initial
begin
	sevensegement1_expected[2] = 1'bX;
end 
// expected sevensegement1[ 1 ]
initial
begin
	sevensegement1_expected[1] = 1'bX;
end 
// expected sevensegement1[ 0 ]
initial
begin
	sevensegement1_expected[0] = 1'bX;
end 
// expected sevensegement0[ 6 ]
initial
begin
	sevensegement0_expected[6] = 1'bX;
end 
// expected sevensegement0[ 5 ]
initial
begin
	sevensegement0_expected[5] = 1'bX;
end 
// expected sevensegement0[ 4 ]
initial
begin
	sevensegement0_expected[4] = 1'bX;
end 
// expected sevensegement0[ 3 ]
initial
begin
	sevensegement0_expected[3] = 1'bX;
end 
// expected sevensegement0[ 2 ]
initial
begin
	sevensegement0_expected[2] = 1'bX;
end 
// expected sevensegement0[ 1 ]
initial
begin
	sevensegement0_expected[1] = 1'bX;
end 
// expected sevensegement0[ 0 ]
initial
begin
	sevensegement0_expected[0] = 1'bX;
end 
// generate trigger
always @(sevensegement0_expected or sevensegement0 or sevensegement1_expected or sevensegement1 or sevensegement2_expected or sevensegement2 or sevensegement3_expected or sevensegement3)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected sevensegement0 = %b | expected sevensegement1 = %b | expected sevensegement2 = %b | expected sevensegement3 = %b | ",sevensegement0_expected_prev,sevensegement1_expected_prev,sevensegement2_expected_prev,sevensegement3_expected_prev);
	$display("| real sevensegement0 = %b | real sevensegement1 = %b | real sevensegement2 = %b | real sevensegement3 = %b | ",sevensegement0_prev,sevensegement1_prev,sevensegement2_prev,sevensegement3_prev);
`endif
	if (
		( sevensegement0_expected_prev[0] !== 1'bx ) && ( sevensegement0_prev[0] !== sevensegement0_expected_prev[0] )
		&& ((sevensegement0_expected_prev[0] !== last_sevensegement0_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sevensegement0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sevensegement0_expected_prev);
		$display ("     Real value = %b", sevensegement0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_sevensegement0_exp[0] = sevensegement0_expected_prev[0];
	end
	if (
		( sevensegement0_expected_prev[1] !== 1'bx ) && ( sevensegement0_prev[1] !== sevensegement0_expected_prev[1] )
		&& ((sevensegement0_expected_prev[1] !== last_sevensegement0_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sevensegement0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sevensegement0_expected_prev);
		$display ("     Real value = %b", sevensegement0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_sevensegement0_exp[1] = sevensegement0_expected_prev[1];
	end
	if (
		( sevensegement0_expected_prev[2] !== 1'bx ) && ( sevensegement0_prev[2] !== sevensegement0_expected_prev[2] )
		&& ((sevensegement0_expected_prev[2] !== last_sevensegement0_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sevensegement0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sevensegement0_expected_prev);
		$display ("     Real value = %b", sevensegement0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_sevensegement0_exp[2] = sevensegement0_expected_prev[2];
	end
	if (
		( sevensegement0_expected_prev[3] !== 1'bx ) && ( sevensegement0_prev[3] !== sevensegement0_expected_prev[3] )
		&& ((sevensegement0_expected_prev[3] !== last_sevensegement0_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sevensegement0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sevensegement0_expected_prev);
		$display ("     Real value = %b", sevensegement0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_sevensegement0_exp[3] = sevensegement0_expected_prev[3];
	end
	if (
		( sevensegement0_expected_prev[4] !== 1'bx ) && ( sevensegement0_prev[4] !== sevensegement0_expected_prev[4] )
		&& ((sevensegement0_expected_prev[4] !== last_sevensegement0_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sevensegement0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sevensegement0_expected_prev);
		$display ("     Real value = %b", sevensegement0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_sevensegement0_exp[4] = sevensegement0_expected_prev[4];
	end
	if (
		( sevensegement0_expected_prev[5] !== 1'bx ) && ( sevensegement0_prev[5] !== sevensegement0_expected_prev[5] )
		&& ((sevensegement0_expected_prev[5] !== last_sevensegement0_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sevensegement0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sevensegement0_expected_prev);
		$display ("     Real value = %b", sevensegement0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_sevensegement0_exp[5] = sevensegement0_expected_prev[5];
	end
	if (
		( sevensegement0_expected_prev[6] !== 1'bx ) && ( sevensegement0_prev[6] !== sevensegement0_expected_prev[6] )
		&& ((sevensegement0_expected_prev[6] !== last_sevensegement0_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sevensegement0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sevensegement0_expected_prev);
		$display ("     Real value = %b", sevensegement0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_sevensegement0_exp[6] = sevensegement0_expected_prev[6];
	end
	if (
		( sevensegement1_expected_prev[0] !== 1'bx ) && ( sevensegement1_prev[0] !== sevensegement1_expected_prev[0] )
		&& ((sevensegement1_expected_prev[0] !== last_sevensegement1_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sevensegement1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sevensegement1_expected_prev);
		$display ("     Real value = %b", sevensegement1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sevensegement1_exp[0] = sevensegement1_expected_prev[0];
	end
	if (
		( sevensegement1_expected_prev[1] !== 1'bx ) && ( sevensegement1_prev[1] !== sevensegement1_expected_prev[1] )
		&& ((sevensegement1_expected_prev[1] !== last_sevensegement1_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sevensegement1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sevensegement1_expected_prev);
		$display ("     Real value = %b", sevensegement1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sevensegement1_exp[1] = sevensegement1_expected_prev[1];
	end
	if (
		( sevensegement1_expected_prev[2] !== 1'bx ) && ( sevensegement1_prev[2] !== sevensegement1_expected_prev[2] )
		&& ((sevensegement1_expected_prev[2] !== last_sevensegement1_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sevensegement1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sevensegement1_expected_prev);
		$display ("     Real value = %b", sevensegement1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sevensegement1_exp[2] = sevensegement1_expected_prev[2];
	end
	if (
		( sevensegement1_expected_prev[3] !== 1'bx ) && ( sevensegement1_prev[3] !== sevensegement1_expected_prev[3] )
		&& ((sevensegement1_expected_prev[3] !== last_sevensegement1_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sevensegement1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sevensegement1_expected_prev);
		$display ("     Real value = %b", sevensegement1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sevensegement1_exp[3] = sevensegement1_expected_prev[3];
	end
	if (
		( sevensegement1_expected_prev[4] !== 1'bx ) && ( sevensegement1_prev[4] !== sevensegement1_expected_prev[4] )
		&& ((sevensegement1_expected_prev[4] !== last_sevensegement1_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sevensegement1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sevensegement1_expected_prev);
		$display ("     Real value = %b", sevensegement1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sevensegement1_exp[4] = sevensegement1_expected_prev[4];
	end
	if (
		( sevensegement1_expected_prev[5] !== 1'bx ) && ( sevensegement1_prev[5] !== sevensegement1_expected_prev[5] )
		&& ((sevensegement1_expected_prev[5] !== last_sevensegement1_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sevensegement1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sevensegement1_expected_prev);
		$display ("     Real value = %b", sevensegement1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sevensegement1_exp[5] = sevensegement1_expected_prev[5];
	end
	if (
		( sevensegement1_expected_prev[6] !== 1'bx ) && ( sevensegement1_prev[6] !== sevensegement1_expected_prev[6] )
		&& ((sevensegement1_expected_prev[6] !== last_sevensegement1_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sevensegement1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sevensegement1_expected_prev);
		$display ("     Real value = %b", sevensegement1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sevensegement1_exp[6] = sevensegement1_expected_prev[6];
	end
	if (
		( sevensegement2_expected_prev[0] !== 1'bx ) && ( sevensegement2_prev[0] !== sevensegement2_expected_prev[0] )
		&& ((sevensegement2_expected_prev[0] !== last_sevensegement2_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sevensegement2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sevensegement2_expected_prev);
		$display ("     Real value = %b", sevensegement2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sevensegement2_exp[0] = sevensegement2_expected_prev[0];
	end
	if (
		( sevensegement2_expected_prev[1] !== 1'bx ) && ( sevensegement2_prev[1] !== sevensegement2_expected_prev[1] )
		&& ((sevensegement2_expected_prev[1] !== last_sevensegement2_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sevensegement2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sevensegement2_expected_prev);
		$display ("     Real value = %b", sevensegement2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sevensegement2_exp[1] = sevensegement2_expected_prev[1];
	end
	if (
		( sevensegement2_expected_prev[2] !== 1'bx ) && ( sevensegement2_prev[2] !== sevensegement2_expected_prev[2] )
		&& ((sevensegement2_expected_prev[2] !== last_sevensegement2_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sevensegement2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sevensegement2_expected_prev);
		$display ("     Real value = %b", sevensegement2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sevensegement2_exp[2] = sevensegement2_expected_prev[2];
	end
	if (
		( sevensegement2_expected_prev[3] !== 1'bx ) && ( sevensegement2_prev[3] !== sevensegement2_expected_prev[3] )
		&& ((sevensegement2_expected_prev[3] !== last_sevensegement2_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sevensegement2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sevensegement2_expected_prev);
		$display ("     Real value = %b", sevensegement2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sevensegement2_exp[3] = sevensegement2_expected_prev[3];
	end
	if (
		( sevensegement2_expected_prev[4] !== 1'bx ) && ( sevensegement2_prev[4] !== sevensegement2_expected_prev[4] )
		&& ((sevensegement2_expected_prev[4] !== last_sevensegement2_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sevensegement2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sevensegement2_expected_prev);
		$display ("     Real value = %b", sevensegement2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sevensegement2_exp[4] = sevensegement2_expected_prev[4];
	end
	if (
		( sevensegement2_expected_prev[5] !== 1'bx ) && ( sevensegement2_prev[5] !== sevensegement2_expected_prev[5] )
		&& ((sevensegement2_expected_prev[5] !== last_sevensegement2_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sevensegement2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sevensegement2_expected_prev);
		$display ("     Real value = %b", sevensegement2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sevensegement2_exp[5] = sevensegement2_expected_prev[5];
	end
	if (
		( sevensegement2_expected_prev[6] !== 1'bx ) && ( sevensegement2_prev[6] !== sevensegement2_expected_prev[6] )
		&& ((sevensegement2_expected_prev[6] !== last_sevensegement2_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sevensegement2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sevensegement2_expected_prev);
		$display ("     Real value = %b", sevensegement2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sevensegement2_exp[6] = sevensegement2_expected_prev[6];
	end
	if (
		( sevensegement3_expected_prev[0] !== 1'bx ) && ( sevensegement3_prev[0] !== sevensegement3_expected_prev[0] )
		&& ((sevensegement3_expected_prev[0] !== last_sevensegement3_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sevensegement3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sevensegement3_expected_prev);
		$display ("     Real value = %b", sevensegement3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sevensegement3_exp[0] = sevensegement3_expected_prev[0];
	end
	if (
		( sevensegement3_expected_prev[1] !== 1'bx ) && ( sevensegement3_prev[1] !== sevensegement3_expected_prev[1] )
		&& ((sevensegement3_expected_prev[1] !== last_sevensegement3_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sevensegement3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sevensegement3_expected_prev);
		$display ("     Real value = %b", sevensegement3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sevensegement3_exp[1] = sevensegement3_expected_prev[1];
	end
	if (
		( sevensegement3_expected_prev[2] !== 1'bx ) && ( sevensegement3_prev[2] !== sevensegement3_expected_prev[2] )
		&& ((sevensegement3_expected_prev[2] !== last_sevensegement3_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sevensegement3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sevensegement3_expected_prev);
		$display ("     Real value = %b", sevensegement3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sevensegement3_exp[2] = sevensegement3_expected_prev[2];
	end
	if (
		( sevensegement3_expected_prev[3] !== 1'bx ) && ( sevensegement3_prev[3] !== sevensegement3_expected_prev[3] )
		&& ((sevensegement3_expected_prev[3] !== last_sevensegement3_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sevensegement3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sevensegement3_expected_prev);
		$display ("     Real value = %b", sevensegement3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sevensegement3_exp[3] = sevensegement3_expected_prev[3];
	end
	if (
		( sevensegement3_expected_prev[4] !== 1'bx ) && ( sevensegement3_prev[4] !== sevensegement3_expected_prev[4] )
		&& ((sevensegement3_expected_prev[4] !== last_sevensegement3_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sevensegement3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sevensegement3_expected_prev);
		$display ("     Real value = %b", sevensegement3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sevensegement3_exp[4] = sevensegement3_expected_prev[4];
	end
	if (
		( sevensegement3_expected_prev[5] !== 1'bx ) && ( sevensegement3_prev[5] !== sevensegement3_expected_prev[5] )
		&& ((sevensegement3_expected_prev[5] !== last_sevensegement3_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sevensegement3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sevensegement3_expected_prev);
		$display ("     Real value = %b", sevensegement3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sevensegement3_exp[5] = sevensegement3_expected_prev[5];
	end
	if (
		( sevensegement3_expected_prev[6] !== 1'bx ) && ( sevensegement3_prev[6] !== sevensegement3_expected_prev[6] )
		&& ((sevensegement3_expected_prev[6] !== last_sevensegement3_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sevensegement3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sevensegement3_expected_prev);
		$display ("     Real value = %b", sevensegement3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sevensegement3_exp[6] = sevensegement3_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Lab3_2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [1:0] switch;
// wires                                               
wire [0:6] sevensegement0;
wire [0:6] sevensegement1;
wire [0:6] sevensegement2;
wire [0:6] sevensegement3;

wire sampler;                             

// assign statements (if any)                          
Lab3_2 i1 (
// port map - connection between master ports and signals/registers   
	.sevensegement0(sevensegement0),
	.sevensegement1(sevensegement1),
	.sevensegement2(sevensegement2),
	.sevensegement3(sevensegement3),
	.switch(switch)
);
// switch[ 1 ]
always
begin
	switch[1] = 1'b0;
	switch[1] = #20000 1'b1;
	#20000;
end 
// switch[ 0 ]
always
begin
	switch[0] = 1'b0;
	switch[0] = #10000 1'b1;
	#10000;
end 

Lab3_2_vlg_sample_tst tb_sample (
	.switch(switch),
	.sampler_tx(sampler)
);

Lab3_2_vlg_check_tst tb_out(
	.sevensegement0(sevensegement0),
	.sevensegement1(sevensegement1),
	.sevensegement2(sevensegement2),
	.sevensegement3(sevensegement3),
	.sampler_rx(sampler)
);
endmodule

