LIBRARY ieee;
USE ieee.std_logic_1164.all;
use ieee.numeric_std.all;
entity Lab7_1 is
	port (
		KEY: in std_logic_vector(1 downto 1);
		CLOck_50Mhz: in std_LOGIC
		LEDG: out std_logic_vector(7 downto 0);
		HEX2:out std_logic_vector(0 to 7);
		HEX3:out std_logic_vector(0 to 7);

	);
end  Lab7_1;
architecture behavor of Lab7_1 is
	component CLK_DIV
		PORT( 
			clock_50Mhz	: IN	STD_LOGIC;
			clock_1Hz: OUT	STD_LOGIC
		);
	component Intto7seg
	PORT( 
		number: in Integer;
		HEX: out std_logic_vector(0 to 6)
	);
	end component;
	signal digit1:Integer;
	signal ditit2:integer;
	signal clock:std_logic;
	signal reset:std_logic;
begin
	reset <= KEY(1);
	PROCESS(clock)
		VARIABLE temp:Integer RANGE 0 to 99;
	BEGIN
		IF (clock'EVENT and clock='1')THEN
			temp := temp+1;
		END IF;
		IF(reset='0')THEN
			temp:=0;
		END IF;
		digit1<=temp mod 10;
		ditit2<=temp/10;
	END PROCESS;
	myclock:CLK_DIV PORT MAP(clock_50Mhz,clock);
	digit1display:intto7seg PORT MAP(digit1,HEX2);
	digit2display:intto7seg PORT MAP(digit2,HEX3);
end behavor ;



library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;

entity CLK_DIV is
	port 
	(	
		clock_50Mhz				: IN	STD_LOGIC;
		clock_1KHz				: OUT	STD_LOGIC;
		clock_100Hz				: OUT	STD_LOGIC;
		clock_10Hz				: OUT	STD_LOGIC;
		clock_1Hz				: OUT	STD_LOGIC); 
end CLK_DIV;

architecture arch of CLK_DIV is
	constant divisor: integer := 50000;
	signal count_1khz: integer range 0 to 25000 := 0;
	signal count_100hz, count_10hz, count_1hz: STD_LOGIC_VECTOR(2 DOWNTO 0);
	signal CLK_1khz, CLK_100hz, CLK_10hz, CLK_1hz: STD_LOGIC;
	
begin
	clock_1KHz <= CLK_1khz;
	clock_100Hz <= CLK_100hz;
	clock_10Hz <= CLK_10hz;
	clock_1Hz <= CLK_1hz;
	
-- Divide 50Mhz clock by 50000 => 1kHz
	process(clock_50Mhz)
	begin
		IF clock_50Mhz'event and clock_50Mhz='1' THEN
			IF count_1khz <  divisor/2 THEN
				count_1khz <= count_1khz + 1;
			ELSE
				count_1khz <= 0;
				CLK_1khz <= NOT CLK_1khz;
			END IF;
		END IF;
	end process;
	
-- Divide by 10 
	process(CLK_1khz)
	begin
		IF CLK_1khz'event and CLK_1khz='1' THEN
			IF count_100hz <  5 THEN
				count_100hz <= count_100hz + 1;
			ELSE
				count_100hz <= "000";
				CLK_100hz <= NOT CLK_100hz;
			END IF;
		END IF;
	end process;
	
	-- Divide by 10 
	process(CLK_100hz)
	begin
		IF CLK_100hz'event and CLK_100hz='1' THEN
			IF count_10hz <  5 THEN
				count_10hz <= count_10hz + 1;
			ELSE
				count_10hz <= "000";
				CLK_10hz <= NOT CLK_10hz;
			END IF;
		END IF;
	end process;
	
	-- Divide by 10 
	process(CLK_10hz)
	begin
		IF CLK_10hz'event and CLK_10hz='1' THEN
			IF count_1hz <  5 THEN
				count_1hz <= count_1hz + 1;
			ELSE
				count_1hz <= "000";
				CLK_1hz <= NOT CLK_1hz;
			END IF;
		END IF;
	end process;
	
end arch;
LIBRARY ieee;
USE ieee.std_logic_1164.all;
use ieee.numeric_std.all;
ENTITY Intto7seg IS
	PORT( 
		number: in Integer;
		HEX: out std_logic_vector(0 to 6)
	);
END Intto7seg;

architecture Behavor OF Intto7seg IS
begin
	PROCESS(number)
	Begin
		CASE number IS
			WHEN 1=>HEX<="1001111" ;
			WHEN 2 =>HEX<="0010010" ;
			WHEN 3 =>HEX<="0000110" ;
			WHEN 4 =>HEX<="1001100" ;
			WHEN 5 =>HEX<="0100100" ;
			WHEN 6 =>HEX<="0100000" ;
			WHEN 7 =>HEX<="0001111" ;
			WHEN 8 =>HEX<="0000000" ;
			WHEN 9 =>HEX<="0001100" ;
			WHEN 0 =>HEX<="0000001" ;
			WHEN 10 =>HEX<="0001000" ;
			WHEN OTHERS =>HEX<="1111111";
		END CASE;
	end process;
end Behavor;