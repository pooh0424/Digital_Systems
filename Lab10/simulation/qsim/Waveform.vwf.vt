// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/08/2024 23:14:42"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Lab10_2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Lab10_2_vlg_sample_tst(
	CLOCK_50,
	KEY,
	sampler_tx
);
input  CLOCK_50;
input [2:1] KEY;
output sampler_tx;

reg sample;
time current_time;
always @(CLOCK_50 or KEY)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Lab10_2_vlg_check_tst (
	GPIO_0,
	GPIO_1,
	sampler_rx
);
input [21:9] GPIO_0;
input [21:9] GPIO_1;
input sampler_rx;

reg [21:9] GPIO_0_expected;
reg [21:9] GPIO_1_expected;

reg [21:9] GPIO_0_prev;
reg [21:9] GPIO_1_prev;

reg [21:9] GPIO_0_expected_prev;
reg [21:9] GPIO_1_expected_prev;

reg [21:9] last_GPIO_0_exp;
reg [21:9] last_GPIO_1_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	GPIO_0_prev = GPIO_0;
	GPIO_1_prev = GPIO_1;
end

// update expected /o prevs

always @(trigger)
begin
	GPIO_0_expected_prev = GPIO_0_expected;
	GPIO_1_expected_prev = GPIO_1_expected;
end



// expected GPIO_1[17]
initial
begin
	GPIO_1_expected[17] = 1'bX;
	GPIO_1_expected[17] = #999000 1'b0;
end 

// expected GPIO_1[15]
initial
begin
	GPIO_1_expected[15] = 1'bX;
	GPIO_1_expected[15] = #999000 1'b0;
end 

// expected GPIO_1[14]
initial
begin
	GPIO_1_expected[14] = 1'bX;
	GPIO_1_expected[14] = #999000 1'b0;
end 

// expected GPIO_1[13]
initial
begin
	GPIO_1_expected[13] = 1'bX;
	GPIO_1_expected[13] = #999000 1'b0;
end 

// expected GPIO_1[11]
initial
begin
	GPIO_1_expected[11] = 1'bX;
	GPIO_1_expected[11] = #999000 1'b0;
end 

// expected GPIO_1[9]
initial
begin
	GPIO_1_expected[9] = 1'bX;
	GPIO_1_expected[9] = #999000 1'b0;
end 

// expected GPIO_0[21]
initial
begin
	GPIO_0_expected[21] = 1'bX;
	GPIO_0_expected[21] = #999000 1'b0;
end 

// expected GPIO_0[19]
initial
begin
	GPIO_0_expected[19] = 1'bX;
	GPIO_0_expected[19] = #999000 1'b0;
end 

// expected GPIO_0[10]
initial
begin
	GPIO_0_expected[10] = 1'bX;
	GPIO_0_expected[10] = #999000 1'b0;
end 

// expected GPIO_0[11]
initial
begin
	GPIO_0_expected[11] = 1'bX;
	GPIO_0_expected[11] = #999000 1'b0;
end 

// expected GPIO_0[12]
initial
begin
	GPIO_0_expected[12] = 1'bX;
	GPIO_0_expected[12] = #999000 1'b0;
end 

// expected GPIO_0[13]
initial
begin
	GPIO_0_expected[13] = 1'bX;
	GPIO_0_expected[13] = #999000 1'b0;
end 

// expected GPIO_0[14]
initial
begin
	GPIO_0_expected[14] = 1'bX;
	GPIO_0_expected[14] = #999000 1'b0;
end 

// expected GPIO_0[9]
initial
begin
	GPIO_0_expected[9] = 1'bX;
	GPIO_0_expected[9] = #999000 1'b0;
end 

// expected GPIO_0[15]
initial
begin
	GPIO_0_expected[15] = 1'bX;
	GPIO_0_expected[15] = #999000 1'b0;
end 

// expected GPIO_0[16]
initial
begin
	GPIO_0_expected[16] = 1'bX;
	GPIO_0_expected[16] = #999000 1'b0;
end 

// expected GPIO_0[17]
initial
begin
	GPIO_0_expected[17] = 1'bX;
	GPIO_0_expected[17] = #999000 1'b0;
end 

// expected GPIO_0[18]
initial
begin
	GPIO_0_expected[18] = 1'bX;
	GPIO_0_expected[18] = #999000 1'b0;
end 

// expected GPIO_0[20]
initial
begin
	GPIO_0_expected[20] = 1'bX;
	GPIO_0_expected[20] = #999000 1'b0;
end 

// expected GPIO_1[10]
initial
begin
	GPIO_1_expected[10] = 1'bX;
	GPIO_1_expected[10] = #999000 1'b0;
end 

// expected GPIO_1[12]
initial
begin
	GPIO_1_expected[12] = 1'bX;
	GPIO_1_expected[12] = #999000 1'b0;
end 

// expected GPIO_1[16]
initial
begin
	GPIO_1_expected[16] = 1'bX;
	GPIO_1_expected[16] = #999000 1'b0;
end 

// expected GPIO_1[18]
initial
begin
	GPIO_1_expected[18] = 1'bX;
	GPIO_1_expected[18] = #999000 1'b0;
end 

// expected GPIO_1[19]
initial
begin
	GPIO_1_expected[19] = 1'bX;
	GPIO_1_expected[19] = #999000 1'b0;
end 

// expected GPIO_1[20]
initial
begin
	GPIO_1_expected[20] = 1'bX;
	GPIO_1_expected[20] = #999000 1'b0;
end 

// expected GPIO_1[21]
initial
begin
	GPIO_1_expected[21] = 1'bX;
	GPIO_1_expected[21] = #999000 1'b0;
end 
// generate trigger
always @(GPIO_0_expected or GPIO_0 or GPIO_1_expected or GPIO_1)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected GPIO_0 = %b | expected GPIO_1 = %b | ",GPIO_0_expected_prev,GPIO_1_expected_prev);
	$display("| real GPIO_0 = %b | real GPIO_1 = %b | ",GPIO_0_prev,GPIO_1_prev);
`endif
	if (
		( GPIO_0_expected_prev[0] !== 1'bx ) && ( GPIO_0_prev[0] !== GPIO_0_expected_prev[0] )
		&& ((GPIO_0_expected_prev[0] !== last_GPIO_0_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_0_expected_prev);
		$display ("     Real value = %b", GPIO_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_GPIO_0_exp[0] = GPIO_0_expected_prev[0];
	end
	if (
		( GPIO_0_expected_prev[1] !== 1'bx ) && ( GPIO_0_prev[1] !== GPIO_0_expected_prev[1] )
		&& ((GPIO_0_expected_prev[1] !== last_GPIO_0_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_0_expected_prev);
		$display ("     Real value = %b", GPIO_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_GPIO_0_exp[1] = GPIO_0_expected_prev[1];
	end
	if (
		( GPIO_0_expected_prev[2] !== 1'bx ) && ( GPIO_0_prev[2] !== GPIO_0_expected_prev[2] )
		&& ((GPIO_0_expected_prev[2] !== last_GPIO_0_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_0_expected_prev);
		$display ("     Real value = %b", GPIO_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_GPIO_0_exp[2] = GPIO_0_expected_prev[2];
	end
	if (
		( GPIO_0_expected_prev[3] !== 1'bx ) && ( GPIO_0_prev[3] !== GPIO_0_expected_prev[3] )
		&& ((GPIO_0_expected_prev[3] !== last_GPIO_0_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_0_expected_prev);
		$display ("     Real value = %b", GPIO_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_GPIO_0_exp[3] = GPIO_0_expected_prev[3];
	end
	if (
		( GPIO_0_expected_prev[4] !== 1'bx ) && ( GPIO_0_prev[4] !== GPIO_0_expected_prev[4] )
		&& ((GPIO_0_expected_prev[4] !== last_GPIO_0_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_0_expected_prev);
		$display ("     Real value = %b", GPIO_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_GPIO_0_exp[4] = GPIO_0_expected_prev[4];
	end
	if (
		( GPIO_0_expected_prev[5] !== 1'bx ) && ( GPIO_0_prev[5] !== GPIO_0_expected_prev[5] )
		&& ((GPIO_0_expected_prev[5] !== last_GPIO_0_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_0_expected_prev);
		$display ("     Real value = %b", GPIO_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_GPIO_0_exp[5] = GPIO_0_expected_prev[5];
	end
	if (
		( GPIO_0_expected_prev[6] !== 1'bx ) && ( GPIO_0_prev[6] !== GPIO_0_expected_prev[6] )
		&& ((GPIO_0_expected_prev[6] !== last_GPIO_0_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_0_expected_prev);
		$display ("     Real value = %b", GPIO_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_GPIO_0_exp[6] = GPIO_0_expected_prev[6];
	end
	if (
		( GPIO_0_expected_prev[7] !== 1'bx ) && ( GPIO_0_prev[7] !== GPIO_0_expected_prev[7] )
		&& ((GPIO_0_expected_prev[7] !== last_GPIO_0_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_0[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_0_expected_prev);
		$display ("     Real value = %b", GPIO_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_GPIO_0_exp[7] = GPIO_0_expected_prev[7];
	end
	if (
		( GPIO_0_expected_prev[8] !== 1'bx ) && ( GPIO_0_prev[8] !== GPIO_0_expected_prev[8] )
		&& ((GPIO_0_expected_prev[8] !== last_GPIO_0_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_0[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_0_expected_prev);
		$display ("     Real value = %b", GPIO_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_GPIO_0_exp[8] = GPIO_0_expected_prev[8];
	end
	if (
		( GPIO_0_expected_prev[9] !== 1'bx ) && ( GPIO_0_prev[9] !== GPIO_0_expected_prev[9] )
		&& ((GPIO_0_expected_prev[9] !== last_GPIO_0_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_0[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_0_expected_prev);
		$display ("     Real value = %b", GPIO_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_GPIO_0_exp[9] = GPIO_0_expected_prev[9];
	end
	if (
		( GPIO_0_expected_prev[10] !== 1'bx ) && ( GPIO_0_prev[10] !== GPIO_0_expected_prev[10] )
		&& ((GPIO_0_expected_prev[10] !== last_GPIO_0_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_0[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_0_expected_prev);
		$display ("     Real value = %b", GPIO_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_GPIO_0_exp[10] = GPIO_0_expected_prev[10];
	end
	if (
		( GPIO_0_expected_prev[11] !== 1'bx ) && ( GPIO_0_prev[11] !== GPIO_0_expected_prev[11] )
		&& ((GPIO_0_expected_prev[11] !== last_GPIO_0_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_0[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_0_expected_prev);
		$display ("     Real value = %b", GPIO_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_GPIO_0_exp[11] = GPIO_0_expected_prev[11];
	end
	if (
		( GPIO_0_expected_prev[12] !== 1'bx ) && ( GPIO_0_prev[12] !== GPIO_0_expected_prev[12] )
		&& ((GPIO_0_expected_prev[12] !== last_GPIO_0_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_0[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_0_expected_prev);
		$display ("     Real value = %b", GPIO_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_GPIO_0_exp[12] = GPIO_0_expected_prev[12];
	end
	if (
		( GPIO_1_expected_prev[0] !== 1'bx ) && ( GPIO_1_prev[0] !== GPIO_1_expected_prev[0] )
		&& ((GPIO_1_expected_prev[0] !== last_GPIO_1_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_GPIO_1_exp[0] = GPIO_1_expected_prev[0];
	end
	if (
		( GPIO_1_expected_prev[1] !== 1'bx ) && ( GPIO_1_prev[1] !== GPIO_1_expected_prev[1] )
		&& ((GPIO_1_expected_prev[1] !== last_GPIO_1_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_GPIO_1_exp[1] = GPIO_1_expected_prev[1];
	end
	if (
		( GPIO_1_expected_prev[2] !== 1'bx ) && ( GPIO_1_prev[2] !== GPIO_1_expected_prev[2] )
		&& ((GPIO_1_expected_prev[2] !== last_GPIO_1_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_GPIO_1_exp[2] = GPIO_1_expected_prev[2];
	end
	if (
		( GPIO_1_expected_prev[3] !== 1'bx ) && ( GPIO_1_prev[3] !== GPIO_1_expected_prev[3] )
		&& ((GPIO_1_expected_prev[3] !== last_GPIO_1_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_GPIO_1_exp[3] = GPIO_1_expected_prev[3];
	end
	if (
		( GPIO_1_expected_prev[4] !== 1'bx ) && ( GPIO_1_prev[4] !== GPIO_1_expected_prev[4] )
		&& ((GPIO_1_expected_prev[4] !== last_GPIO_1_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_GPIO_1_exp[4] = GPIO_1_expected_prev[4];
	end
	if (
		( GPIO_1_expected_prev[5] !== 1'bx ) && ( GPIO_1_prev[5] !== GPIO_1_expected_prev[5] )
		&& ((GPIO_1_expected_prev[5] !== last_GPIO_1_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_GPIO_1_exp[5] = GPIO_1_expected_prev[5];
	end
	if (
		( GPIO_1_expected_prev[6] !== 1'bx ) && ( GPIO_1_prev[6] !== GPIO_1_expected_prev[6] )
		&& ((GPIO_1_expected_prev[6] !== last_GPIO_1_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_GPIO_1_exp[6] = GPIO_1_expected_prev[6];
	end
	if (
		( GPIO_1_expected_prev[7] !== 1'bx ) && ( GPIO_1_prev[7] !== GPIO_1_expected_prev[7] )
		&& ((GPIO_1_expected_prev[7] !== last_GPIO_1_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_GPIO_1_exp[7] = GPIO_1_expected_prev[7];
	end
	if (
		( GPIO_1_expected_prev[8] !== 1'bx ) && ( GPIO_1_prev[8] !== GPIO_1_expected_prev[8] )
		&& ((GPIO_1_expected_prev[8] !== last_GPIO_1_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_GPIO_1_exp[8] = GPIO_1_expected_prev[8];
	end
	if (
		( GPIO_1_expected_prev[9] !== 1'bx ) && ( GPIO_1_prev[9] !== GPIO_1_expected_prev[9] )
		&& ((GPIO_1_expected_prev[9] !== last_GPIO_1_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_GPIO_1_exp[9] = GPIO_1_expected_prev[9];
	end
	if (
		( GPIO_1_expected_prev[10] !== 1'bx ) && ( GPIO_1_prev[10] !== GPIO_1_expected_prev[10] )
		&& ((GPIO_1_expected_prev[10] !== last_GPIO_1_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_GPIO_1_exp[10] = GPIO_1_expected_prev[10];
	end
	if (
		( GPIO_1_expected_prev[11] !== 1'bx ) && ( GPIO_1_prev[11] !== GPIO_1_expected_prev[11] )
		&& ((GPIO_1_expected_prev[11] !== last_GPIO_1_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_GPIO_1_exp[11] = GPIO_1_expected_prev[11];
	end
	if (
		( GPIO_1_expected_prev[12] !== 1'bx ) && ( GPIO_1_prev[12] !== GPIO_1_expected_prev[12] )
		&& ((GPIO_1_expected_prev[12] !== last_GPIO_1_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_GPIO_1_exp[12] = GPIO_1_expected_prev[12];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#3000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Lab10_2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK_50;
reg [2:1] KEY;
// wires                                               
wire [21:9] GPIO_0;
wire [21:9] GPIO_1;

wire sampler;                             

// assign statements (if any)                          
Lab10_2 i1 (
// port map - connection between master ports and signals/registers   
	.CLOCK_50(CLOCK_50),
	.GPIO_0(GPIO_0),
	.GPIO_1(GPIO_1),
	.KEY(KEY)
);

// CLOCK_50
always
begin
	CLOCK_50 = 1'b0;
	CLOCK_50 = #5000 1'b1;
	#5000;
end 

// KEY[1]
initial
begin
	KEY[1] = 1'b0;
	KEY[1] = #10000 1'b1;
end 

// KEY[2]
initial
begin
	KEY[2] = 1'b1;
	KEY[2] = #540000 1'b0;
	KEY[2] = #10000 1'b1;
end 

Lab10_2_vlg_sample_tst tb_sample (
	.CLOCK_50(CLOCK_50),
	.KEY(KEY),
	.sampler_tx(sampler)
);

Lab10_2_vlg_check_tst tb_out(
	.GPIO_0(GPIO_0),
	.GPIO_1(GPIO_1),
	.sampler_rx(sampler)
);
endmodule

